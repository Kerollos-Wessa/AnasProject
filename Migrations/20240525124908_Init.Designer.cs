// <auto-generated />
using System;
using AnasProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnasProject.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240525124908_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnasProject.CircleGeofence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("GeofenceId")
                        .HasColumnType("bigint");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<long?>("Radius")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GeofenceId");

                    b.ToTable("CircleGeofences");
                });

            modelBuilder.Entity("AnasProject.Driver", b =>
                {
                    b.Property<long>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DriverId"));

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("AnasProject.Geofence", b =>
                {
                    b.Property<long>("GeofenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GeofenceId"));

                    b.Property<long?>("AddedDate")
                        .HasColumnType("bigint");

                    b.Property<string>("FillColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("FillOpacity")
                        .HasColumnType("real");

                    b.Property<string>("GeofenceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrockColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("StrockOpacity")
                        .HasColumnType("real");

                    b.Property<float?>("StrockWeight")
                        .HasColumnType("real");

                    b.HasKey("GeofenceId");

                    b.ToTable("Geofences");
                });

            modelBuilder.Entity("AnasProject.PolygonGeofence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("GeofenceId")
                        .HasColumnType("bigint");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("GeofenceId");

                    b.ToTable("PolygonGeofences");
                });

            modelBuilder.Entity("AnasProject.RectangleGeofence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<float?>("East")
                        .HasColumnType("real");

                    b.Property<long?>("GeofenceId")
                        .HasColumnType("bigint");

                    b.Property<float?>("North")
                        .HasColumnType("real");

                    b.Property<float?>("South")
                        .HasColumnType("real");

                    b.Property<float?>("West")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("GeofenceId");

                    b.ToTable("RectangleGeofences");
                });

            modelBuilder.Entity("AnasProject.RouteHistory", b =>
                {
                    b.Property<long>("RouteHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RouteHistoryId"));

                    b.Property<long?>("Epoch")
                        .HasColumnType("bigint");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("VehicleDirection")
                        .HasColumnType("int");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<string>("VehicleSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RouteHistoryId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("RouteHistories");
                });

            modelBuilder.Entity("AnasProject.Vehicle", b =>
                {
                    b.Property<long>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VehicleId"));

                    b.Property<long?>("VehicleNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("VehicleType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("AnasProject.VehiclesInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PurchaseDate")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<string>("VehicleMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleModel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehiclesInformations");
                });

            modelBuilder.Entity("AnasProject.CircleGeofence", b =>
                {
                    b.HasOne("AnasProject.Geofence", "Geofence")
                        .WithMany("CircleGeofences")
                        .HasForeignKey("GeofenceId");

                    b.Navigation("Geofence");
                });

            modelBuilder.Entity("AnasProject.PolygonGeofence", b =>
                {
                    b.HasOne("AnasProject.Geofence", "Geofence")
                        .WithMany("PolygonGeofences")
                        .HasForeignKey("GeofenceId");

                    b.Navigation("Geofence");
                });

            modelBuilder.Entity("AnasProject.RectangleGeofence", b =>
                {
                    b.HasOne("AnasProject.Geofence", "Geofence")
                        .WithMany("RectangleGeofences")
                        .HasForeignKey("GeofenceId");

                    b.Navigation("Geofence");
                });

            modelBuilder.Entity("AnasProject.RouteHistory", b =>
                {
                    b.HasOne("AnasProject.Vehicle", "Vehicle")
                        .WithOne("RouteHistory")
                        .HasForeignKey("AnasProject.RouteHistory", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AnasProject.VehiclesInformation", b =>
                {
                    b.HasOne("AnasProject.Driver", "Driver")
                        .WithMany("VehiclesInformations")
                        .HasForeignKey("DriverId");

                    b.HasOne("AnasProject.Vehicle", "Vehicle")
                        .WithMany("VehiclesInformations")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AnasProject.Driver", b =>
                {
                    b.Navigation("VehiclesInformations");
                });

            modelBuilder.Entity("AnasProject.Geofence", b =>
                {
                    b.Navigation("CircleGeofences");

                    b.Navigation("PolygonGeofences");

                    b.Navigation("RectangleGeofences");
                });

            modelBuilder.Entity("AnasProject.Vehicle", b =>
                {
                    b.Navigation("RouteHistory");

                    b.Navigation("VehiclesInformations");
                });
#pragma warning restore 612, 618
        }
    }
}
